#[cfg(test)]
mod integration_tests;
mod load_swaps;
mod save;
mod schema;
mod wrapper_types;
#[macro_use]
mod swap;
#[macro_use]
mod swap_types;
#[macro_use]
pub mod with_swap_types;
embed_migrations!("./migrations");

pub use self::{
    load_swaps::{AcceptedSwap, LoadAcceptedSwap},
    save::*,
    swap::*,
    swap_types::*,
};

use crate::{
    asset,
    db::wrapper_types::custom_sql_types::Text,
    identity,
    swap_protocols::{
        ledger::{ethereum::ChainId, lightning, Ethereum},
        rfc003::{create_swap::HtlcParams, Secret, SecretHash, SwapId},
        LocalSwapId, Role, SharedSwapId,
    },
    timestamp::Timestamp,
};
use blockchain_contracts::ethereum::rfc003::ether_htlc::EtherHtlc;
use diesel::{self, prelude::*, sqlite::SqliteConnection};
use libp2p::PeerId;
use std::{
    ffi::OsStr,
    path::{Path, PathBuf},
    sync::Arc,
};
use tokio::sync::Mutex;

/// This module provides persistent storage by way of Sqlite.

#[derive(Clone, derivative::Derivative)]
#[derivative(Debug)]
pub struct Sqlite {
    #[derivative(Debug = "ignore")]
    connection: Arc<Mutex<SqliteConnection>>,
}

impl Sqlite {
    /// Return a handle that can be used to access the database.
    ///
    /// When this returns, an Sqlite database file 'cnd.sql' exists in 'dir', a
    /// successful connection to the database has been made, and the database
    /// migrations have been run.
    pub fn new_in_dir<D>(dir: D) -> anyhow::Result<Self>
    where
        D: AsRef<OsStr>,
    {
        let dir = Path::new(&dir);
        let path = db_path_from_dir(dir);
        Sqlite::new(&path)
    }

    /// Return a handle that can be used to access the database.
    ///
    /// Reads or creates an SQLite database file at 'file'.  When this returns
    /// an Sqlite database exists, a successful connection to the database has
    /// been made, and the database migrations have been run.
    pub fn new(file: &Path) -> anyhow::Result<Self> {
        ensure_folder_tree_exists(file)?;

        let connection = SqliteConnection::establish(&format!("file:{}", file.display()))?;
        embedded_migrations::run(&connection)?;

        tracing::info!("SQLite database file: {}", file.display());

        Ok(Sqlite {
            connection: Arc::new(Mutex::new(connection)),
        })
    }

    async fn do_in_transaction<F, T, E>(&self, f: F) -> Result<T, E>
    where
        F: Fn(&SqliteConnection) -> Result<T, E>,
        E: From<diesel::result::Error>,
    {
        let guard = self.connection.lock().await;
        let connection = &*guard;

        let result = connection.transaction(|| f(&connection))?;

        Ok(result)
    }

    async fn role(&self, key: &SwapId) -> anyhow::Result<Role> {
        use self::schema::rfc003_swaps as swaps;

        let record: QueryableSwapRole = self
            .do_in_transaction(|connection| {
                let key = Text(key);

                swaps::table
                    .filter(swaps::swap_id.eq(key))
                    .select((swaps::swap_id, swaps::role))
                    .first(connection)
                    .optional()
            })
            .await?
            .ok_or(Error::SwapNotFound)?;

        Ok(*record.role)
    }
}

// Construct an absolute path to the database file using 'dir' as the base.
fn db_path_from_dir(dir: &Path) -> PathBuf {
    let path = dir.to_path_buf();
    path.join("cnd.sqlite")
}

fn ensure_folder_tree_exists(path: &Path) -> anyhow::Result<()> {
    if let Some(parent) = path.parent() {
        std::fs::create_dir_all(parent)?;
    }

    Ok(())
}

#[derive(Queryable, Debug, Clone, PartialEq)]
struct QueryableSwapRole {
    pub swap_id: Text<SwapId>,
    pub role: Text<Role>,
}

#[derive(Debug, Clone, Copy, thiserror::Error)]
pub enum Error {
    #[error("swap not found")]
    SwapNotFound,
}

/// Data required to create a swap.
///
/// 'create' a swap is defined as the process of initiating a swap within `cnd`.
/// The data required to do so is assumed to have been negotiated between the
/// two parties prior to each creating the swap.
#[derive(Debug, Clone)]
pub struct CreatedSwap<A, B> {
    /// Node specific swap identifier.
    pub swap_id: LocalSwapId,
    /// The parameters used on the alpha ledger.
    pub alpha: A,
    /// The parameters used on the beta ledger.
    pub beta: B,
    /// Peer ID of the swap counterparty.
    pub peer: PeerId,
    /// Role of the node in this swap, Alice or Bob.
    pub role: Role,
}

// This only supports han-eth/halight-btc swap.
/// Data learned during the communication protocols that enables a created swap
/// to be finalized.
#[derive(Debug, Clone, Copy)]
pub struct FinalizedSwap {
    /// The shared swap id, generated by Bob.
    pub swap_id: SharedSwapId,
    /// The secret hash, generated by Alice.
    pub secret_hash: SecretHash,
    /// The counterparties Ethereum identity.
    pub ethereum_identity: identity::Ethereum,
    /// the counterparties Lightning identity.
    pub lightning_identity: identity::Lightning,
}

/// The trait that allows retrieval of a live swap.
pub trait GetLiveSwap {
    fn get_live_swap(&self, swap_id: LocalSwapId) -> anyhow::Result<Option<LiveSwap>>;
}

/// A 'live' swap is a swap that is currently live, i.e., the swap was 'created'
/// by a POST on the REST API, 'finalized' during the communication protocols,
/// and is now 'live'.
#[derive(Debug)]
pub struct LiveSwap {
    pub alpha_ledger: Ethereum,
    pub beta_ledger: lightning::Regtest,
    pub alpha_asset: asset::Ether,
    pub beta_asset: asset::Bitcoin,
    pub alpha_ledger_refund_identity: identity::Ethereum,
    pub alpha_ledger_redeem_identity: identity::Ethereum,
    pub beta_ledger_refund_identity: identity::Lightning,
    pub beta_ledger_redeem_identity: identity::Lightning,
    pub alpha_expiry: Timestamp,
    pub beta_expiry: Timestamp,
    pub swap_id: LocalSwapId,
    pub secret_hash: SecretHash,
    pub secret: Option<Secret>,
    pub role: Role,
}

impl LiveSwap {
    pub fn han_params(&self) -> EtherHtlc {
        HtlcParams {
            asset: self.alpha_asset.clone(),
            ledger: Ethereum::new(ChainId::regtest()),
            redeem_identity: self.alpha_ledger_redeem_identity,
            refund_identity: self.alpha_ledger_refund_identity,
            expiry: self.alpha_expiry,
            secret_hash: self.secret_hash,
        }
        .into()
    }
}

impl GetLiveSwap for Sqlite {
    fn get_live_swap(&self, _: LocalSwapId) -> anyhow::Result<Option<LiveSwap>> {
        unimplemented!()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use spectral::prelude::*;
    use std::path::PathBuf;

    fn temp_db() -> PathBuf {
        let temp_file = tempfile::Builder::new()
            .suffix(".sqlite")
            .tempfile()
            .unwrap();

        temp_file.into_temp_path().to_path_buf()
    }

    #[test]
    fn can_create_a_new_temp_db() {
        let path = temp_db();

        let db = Sqlite::new(&path);

        assert_that(&db).is_ok();
    }

    #[test]
    fn given_no_database_exists_calling_new_creates_it() {
        let path = temp_db();
        // validate assumptions: the db does not exist yet
        assert_that(&path.as_path()).does_not_exist();

        let db = Sqlite::new(&path);

        assert_that(&db).is_ok();
        assert_that(&path.as_path()).exists();
    }

    #[test]
    fn given_db_in_non_existing_directory_tree_calling_new_creates_it() {
        let tempfile = tempfile::tempdir().unwrap();
        let mut path = PathBuf::new();

        path.push(tempfile);
        path.push("some_folder");
        path.push("i_dont_exist");
        path.push("database.sqlite");

        // validate assumptions:
        // 1. the db does not exist yet
        // 2. the parent folder does not exist yet
        assert_that(&path).does_not_exist();
        assert_that(&path.parent()).is_some().does_not_exist();

        let db = Sqlite::new(&path);

        assert_that(&db).is_ok();
        assert_that(&path).exists();
    }
}
